// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetJobCleanFileHandlerFunc turns a function with the right signature into a get job clean file handler
type GetJobCleanFileHandlerFunc func(GetJobCleanFileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetJobCleanFileHandlerFunc) Handle(params GetJobCleanFileParams) middleware.Responder {
	return fn(params)
}

// GetJobCleanFileHandler interface for that can handle valid get job clean file params
type GetJobCleanFileHandler interface {
	Handle(GetJobCleanFileParams) middleware.Responder
}

// NewGetJobCleanFile creates a new http.Handler for the get job clean file operation
func NewGetJobCleanFile(ctx *middleware.Context, handler GetJobCleanFileHandler) *GetJobCleanFile {
	return &GetJobCleanFile{Context: ctx, Handler: handler}
}

/*
	GetJobCleanFile swagger:route GET /api/v1/jobs/{Uuid}/file/clean Job getJobCleanFile

Эндпоинт для получение очищенного файла задачи по UUID
*/
type GetJobCleanFile struct {
	Context *middleware.Context
	Handler GetJobCleanFileHandler
}

func (o *GetJobCleanFile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetJobCleanFileParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
