// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateJobHandlerFunc turns a function with the right signature into a create job handler
type CreateJobHandlerFunc func(CreateJobParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateJobHandlerFunc) Handle(params CreateJobParams) middleware.Responder {
	return fn(params)
}

// CreateJobHandler interface for that can handle valid create job params
type CreateJobHandler interface {
	Handle(CreateJobParams) middleware.Responder
}

// NewCreateJob creates a new http.Handler for the create job operation
func NewCreateJob(ctx *middleware.Context, handler CreateJobHandler) *CreateJob {
	return &CreateJob{Context: ctx, Handler: handler}
}

/*
	CreateJob swagger:route POST /api/v1/jobs Job createJob

Эндпоинт для загрузки звукового файла (.wav)
*/
type CreateJob struct {
	Context *middleware.Context
	Handler CreateJobHandler
}

func (o *CreateJob) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateJobParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateJobOKBody create job o k body
//
// swagger:model CreateJobOKBody
type CreateJobOKBody struct {

	// UUID
	UUID string `json:"UUID,omitempty"`
}

// Validate validates this create job o k body
func (o *CreateJobOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create job o k body based on context it is used
func (o *CreateJobOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateJobOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateJobOKBody) UnmarshalBinary(b []byte) error {
	var res CreateJobOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
